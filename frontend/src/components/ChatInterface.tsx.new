import { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';
import { Send, MessageSquare, AlertCircle, CheckCircle, Mic, Bookmark } from 'lucide-react';
import clsx from 'clsx';
import QuickReplyButtons from './QuickReplyButtons';

// SpeechRecognition support
declare global {
  interface Window {
    SpeechRecognition: any;
    webkitSpeechRecognition: any;
  }
}

interface ChatInterfaceProps {
  isLoggedIn: boolean;
  userName: string;
  userType: 'guest' | 'customer' | null;
  token?: string | null;
  isGuidedMode: boolean;
  onReasonChange: (reason: string | undefined) => void;
  onToggleRecommendations: () => void;
}

export interface ChatInterfaceHandle {
  handleSend: (text: string) => void;
}

interface Message {
  text: string;
  type: 'assistant' | 'user';
  isLoading?: boolean;
}

interface AppointmentDetails {
  Reason_for_Visit__c: string | null;
  Appointment_Date__c: string | null;
  Appointment_Time__c: string | null;
  Location__c: string | null;
  Customer_Type__c: string | null;
  Id?: string;
}

const API_BASE_URL = 'http://localhost:3000/api';

const CUSTOMER_PROMPTS = [
  "I need an appointment with my preferred banker and branch",
  "Reschedule my upcoming appointment to next Tuesday at 2pm",
  "Find me a branch within 5 miles with 24hrs Drive-thru ATM service"
];
const GUEST_PROMPTS = [
  "I'm new and want to open an account",
  "I need help with a loan application",
  "Can I schedule an appointment for tomorrow?"
];

const PLACEHOLDER_SUGGESTIONS = [
  "For Example .... Book an appointment for next Monday 2pm at Manhattan for a loan consultation",
  "For Example .... Find me the nearest branch with 24hrs Check Deposit with drive-thru service",
  "For Example .... Reschedule my upcoming appointment on 6th March at 3pm",
  "For Example .... Check my upcoming bookings",
];

const GUIDED_REASONS = [
  "Open a new account",
  "Apply for a credit card",
  "Manage spending and saving",
  "Build credit and reduce debt",
  "Death of a loved one",
  "Questions or assistance with MYBANK products and services",
  "Save for retirement",
];

type GuidedStep = 'reason' | 'date' | 'location' | 'confirmation' | 'completed' | 'reasonSelection' | 'timeSelection' | 'locationSelection';

function formatAppointmentTime(isoDateTime: string | null): string {
  if (!isoDateTime) return '(Not specified)';
  const date = new Date(isoDateTime);
  const options: Intl.DateTimeFormatOptions = {
    timeZone: 'UTC',
    month: 'long',
    day: 'numeric',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    hour12: true,
  };
  let formatted = date.toLocaleString('en-US', options);
  formatted = formatted.replace(/(\d+),/, '$1th,');
  return formatted;
}

const ChatInterface = forwardRef<ChatInterfaceHandle, ChatInterfaceProps>(({
  isLoggedIn,
  userName,
  userType,
  token,
  isGuidedMode,
  onReasonChange,
  onToggleRecommendations, // Destructure new prop
}, ref) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [sessionError, setSessionError] = useState<boolean>(false);
  const [appointmentStatusComponent, setAppointmentStatusComponent] = useState<JSX.Element | null>(null);
  const [appointmentStatus, setAppointmentStatus] = useState<{
    details: AppointmentDetails | null;
    missingFields: string[];
  }>({ details: null, missingFields: [] });

  // Guided flow states
  const [guidedStep, setGuidedStep] = useState<GuidedStep>('reason');
  const [selectedReason, setSelectedReason] = useState('');
  const [llmDateSuggestions, setLLMDateSuggestions] = useState<{ display: string; raw: string }[]>([]);
  const [selectedDateTime, setSelectedDateTime] = useState<{ display: string; raw: string }>({ display: '', raw: '' });
  const [llmLocationOptions, setLLMLocationOptions] = useState<string[]>([]);
  const [selectedLocation, setSelectedLocation] = useState('');
  const [overrideUsed, setOverrideUsed] = useState(false);

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const recognitionRef = useRef<any | null>(null);
  const retryCount = useRef(0);
  const MAX_RETRIES = 2;

  const [placeholderIndex, setPlaceholderIndex] = useState(0);
  const [currentPlaceholder, setCurrentPlaceholder] = useState('');
  const [charIndex, setCharIndex] = useState(0);
  
  // State for dynamic quick reply suggestions
  const [suggestedReplies, setSuggestedReplies] = useState<string[]>([]);

  // Default prompts for unguided flow
  const prompts = userType === 'customer' ? CUSTOMER_PROMPTS : GUEST_PROMPTS;

  const fetchAppointmentStatus = async () => {
    // Implementation...
  };

  useImperativeHandle(ref, () => ({
    handleSend,
  }));

  const checkSessionHealth = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/session-health`, {
        credentials: 'include',
      });
      return response.ok;
    } catch (error) {
      console.error('Error checking session health:', error);
      return false;
    }
  };

  const chatWithAssistant = async (query: string) => {
    const response = await fetch(`${API_BASE_URL}/chat`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...(token ? { Authorization: `Bearer ${token}` } : {}),
      },
      credentials: 'include',
      body: JSON.stringify({
        query,
        customerType: userType === 'customer' ? 'Regular' : 'Guest',
      }),
    });

    if (!response.ok) {
      if (response.status === 401) {
        throw new Error('Session expired or invalid');
      }
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    
    // Extract suggested replies from the response if available
    // This assumes the LLM might include suggested replies in its response
    try {
      // Look for suggested replies in the format [Reply 1] [Reply 2] [Reply 3]
      const suggestedRepliesPattern = /\[(.*?)\]/g;
      const matches = data.response.match(suggestedRepliesPattern);
      
      if (matches && matches.length > 0) {
        // Remove the brackets and set as suggested replies
        const extractedReplies = matches.map((match: string) => match.replace(/\[|\]/g, '').trim());
        setSuggestedReplies(extractedReplies.slice(0, 4)); // Limit to 4 suggestions
      } else {
        // If no suggestions found in brackets, extract common action phrases
        const commonActions = [
          "book appointment", "schedule appointment", "find branch", "check appointments",
          "yes", "no", "tell me more", "help", "cancel", "confirm"
        ];
        
        const lowerResponse = data.response.toLowerCase();
        const contextualSuggestions = commonActions.filter(action => 
          lowerResponse.includes(action.toLowerCase())
        );
        
        if (contextualSuggestions.length > 0) {
          setSuggestedReplies(contextualSuggestions.slice(0, 4));
        } else {
          // Default suggestions if none found
          setSuggestedReplies([
            "Book an appointment",
            "Find nearest branch",
            "Check my appointments",
            "I need help"
          ]);
        }
      }
    } catch (error) {
      console.error('Error extracting suggested replies:', error);
      // Set default suggestions if extraction fails
      setSuggestedReplies([
        "Book an appointment",
        "Find nearest branch",
        "Check my appointments",
        "I need help"
      ]);
    }
    
    return {
      response: data.response,
      appointmentDetails: data.appointmentDetails || null,
      missingFields: data.missingFields || [],
    };
  };

  useEffect(() => {
    if (guidedStep === 'completed') {
      fetchAppointmentStatus();
    }
  }, [guidedStep]);

  useEffect(() => {
    setMessages(getDefaultMessages());
  }, []);

  useEffect(() => {
    // SpeechRecognition setup...
  }, []);

  useEffect(() => {
    // Placeholder typing effect...
  }, [charIndex, placeholderIndex, input, isProcessing, sessionError, isRecording]);

  useEffect(() => {
    // Fetch initial state...
  }, [token]);

  const getDefaultMessages = (): Message[] => {
    const greeting = userType === 'customer' && userName ? 
      `Welcome back, ${userName}! How can I assist you with your banking needs today?` : 
      `Welcome to MyBank appointment booking! How can I help you today?`;
      
    return [
      { type: 'assistant', text: greeting },
      { type: 'assistant', text: "I can help you schedule an appointment, find a branch, or answer questions about our services. Just let me know what you need!" },
    ];
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Unguided free-form send
  const handleSend = async (text: string = input) => {
    if (!text.trim() || isProcessing) return;

    // In guided mode, if not completed, we use the text to override the button selections
    if (isGuidedMode && guidedStep !== 'completed') {
      if (guidedStep === 'reason') {
        handleReasonSelection(text);
        setOverrideUsed(true);
        setInput('');
        return;
      } else if (guidedStep === 'date') {
        handleTimeSelection({ display: text, raw: text });
        setOverrideUsed(true);
        setInput('');
        return;
      } else if (guidedStep === 'location') {
        handleLocationSelection(text);
        setOverrideUsed(true);
        setInput('');
        return;
      } else if (guidedStep === 'confirmation') {
        handleConfirmAppointment();
        setOverrideUsed(true);
        setInput('');
        return;
      }
    }

    setIsProcessing(true);
    setMessages(prev => [...prev, { type: 'user', text }]);
    setInput('');
    setMessages(prev => [...prev, { type: 'assistant', text: 'Working...', isLoading: true }]);

    try {
      if (sessionError) {
        const isHealthy = await checkSessionHealth();
        if (!isHealthy) throw new Error('Session is not available');
        setSessionError(false);
      }
      const { response, appointmentDetails, missingFields } = await chatWithAssistant(text);
      setMessages(prev => prev.filter(msg => !msg.isLoading));
      setMessages(prev => [...prev, { type: 'assistant', text: response }]);
      setAppointmentStatus({ details: appointmentDetails, missingFields });
      await fetchAppointmentStatus();
    } catch (error) {
      console.error('Error in chat:', error);
      setMessages(prev => prev.filter(msg => !msg.isLoading));
      if (String(error).includes('Session')) {
        setSessionError(true);
        setMessages(prev => [...prev, {
          type: 'assistant',
          text: 'I lost our conversation history. Please try again or refresh the page.'
        }]);
      } else {
        setMessages(prev => [...prev, { type: 'assistant', text: 'Sorry, something went wrong. Please try again!' }]);
      }
    } finally {
      setIsProcessing(false);
    }
  };

  const callGuidedFlow = async (userQuery: string, step: GuidedStep) => {
    const response = await fetch(`${API_BASE_URL}/guidedFlow`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify({
        query: userQuery,
        customerType: userType === 'customer' ? 'Regular' : 'Guest',
        guidedStep: step,
      }),
    });
    return response.json();
  };

  const handleReasonSelection = async (reason: string) => {
    setSelectedReason(reason);
    setMessages(prev => [...prev, { type: 'user', text: reason }]);
    setIsProcessing(true);
    try {
      const data = await callGuidedFlow(reason, 'reasonSelection');
      if (data.timeSlots && Array.isArray(data.timeSlots)) {
        setLLMDateSuggestions(data.timeSlots);
      }
      setMessages(prev => [
        ...prev.filter(msg => !msg.isLoading),
        { type: 'assistant', text: data.response || "Here are some suggested appointment slots..." }
      ]);
      setGuidedStep('date');
    } catch (error) {
      console.error('Error in guided flow (reason):', error);
      setMessages(prev => [...prev, {
        type: 'assistant',
        text: 'Error retrieving date suggestions. Please try again.'
      }]);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleTimeSelection = async (slot: { display: string; raw: string }) => {
    // Implementation...
  };

  const handleLocationSelection = async (loc: string) => {
    // Implementation...
  };

  const handleConfirmAppointment = async () => {
    // Implementation...
  };

  const handleMicClick = () => {
    // Implementation...
  };

  const renderAppointmentStatus = async () => {
    // Implementation...
  };

  // Function to reload date suggestions
  const reloadDateSuggestions = async () => {
    // Implementation...
  };

  // Enhanced reset function to handle both guided and unguided flows
  const resetSession = () => {
    // Implementation...
  };

  return (
    <div className="flex flex-col h-full">
      {/* Chat interface implementation */}
    </div>
  );
});

export default ChatInterface;
